#include <iostream>
#include <iomanip>
#include <string>
#include <limits> // for numeric_limits

using namespace std;

// Constants
const int MAX_STUDENTS = 50;
const int NUM_SUBJECTS = 6;
const string TEACHER_PASSWORD = "ummihaanicomel"; // Set your desired password

// Arrays to store student data
int studentID[MAX_STUDENTS] = {0};
string studentName[MAX_STUDENTS];
double scores[MAX_STUDENTS][NUM_SUBJECTS];
int attendance[MAX_STUDENTS];
string subjectNames[] = {"DATABASE CONCEPT", "FUNDAMENTAL", "CALCULUS", "OPERATING SYSTEM", "STATISTIC", "NETWORKING"};

// Function to validate the teacher's password
bool validatePassword() {
    string enteredPassword;
    cout << setw(50) << "                                                                                                             " << endl;
    cout << setw(50) << "                                                    Enter Teacher Password: ";
    cin >> enteredPassword;
    return enteredPassword == TEACHER_PASSWORD;
}

// Function to clear the screen
void clearScreen() {
#ifdef _WIN32
    system("cls");
#else
    system("clear");
#endif
}

// Function to validate and input student name
string getValidStudentName() {
    string name;
    while (true) {
        cout << setw(50) << "                                                 STUDENT_NAME : ";
        cin.ignore();
        getline(cin, name);

        if (!name.empty()) {
            break;
        }

        cout << setw(50) << "                                     Invalid input. Please enter a non-empty name for STUDENT_NAME: ";
        // Pause and wait for Enter key
        cout << setw(50) << "                                                               Press Enter to continue...";
        cin.ignore(numeric_limits<streamsize>::max(), '\n');  // Ignore Enter key
        cin.get();  // Wait for Enter key
        clearScreen();  // Clear screen here
        cout << setw(50) << "                                                     -------------------------------------------------------------" << endl;
        cout << setw(50) << "                                                          CREATE STUDENT RECORD: STARLIGHT HIGH SCHOOL" << endl;
        cout << setw(50) << "                                                     -------------------------------------------------------------" << endl;
        cout << setw(50) << "                                                                                                             " << endl;
    }
    return name;
}

// Function to input student data
void inputStudentData(int index) {
    cout << setw(50) << "                                                     -------------------------------------------------------------" << endl;
    cout << setw(50) << "                                                          CREATE STUDENT RECORD: STARLIGHT HIGH SCHOOL" << endl;
    cout << setw(50) << "                                                     -------------------------------------------------------------" << endl;
    cout << setw(50) << "                                                                                                             " << endl;
    
    // Validate student ID input
    while (true) {
        cout << setw(50) << "                                                 STUDENT_ID (EXAMPLE: 123456789): ";
        cin >> studentID[index];

        if (!cin.fail() && studentID[index] > 0) {
            break;
        }

        cout << setw(50) << "                                                                                                             " << endl;
        cout << setw(50) << "                                                           Invalid input. Please enter a positive integer for STUDENT_ID: ";
        // Pause and wait for Enter key
        cout << setw(50) << "                                                                         Press Enter to continue...";
        cout << setw(50) << "                                                                                                             " << endl;
        cin.ignore(numeric_limits<streamsize>::max(), '\n');  // Ignore Enter key
        cin.get();  // Wait for Enter key
        clearScreen();  // Clear screen here
        cout << setw(50) << "                                                     -------------------------------------------------------------" << endl;
        cout << setw(50) << "                                                          CREATE STUDENT RECORD: STARLIGHT HIGH SCHOOL" << endl;
        cout << setw(50) << "                                                     -------------------------------------------------------------" << endl;
        cout << setw(50) << "                                                                                                             " << endl;
        
    }

    // Validate student name input
    studentName[index] = getValidStudentName();

   // Validate scores input
    for (int j = 0; j < NUM_SUBJECTS; ++j) {
        while (true) {
            cout << setw(50) << "  " << subjectNames[j] << ": ";
            cin >> scores[index][j];

            if (!cin.fail() && scores[index][j] >= 0 && scores[index][j] <= 100) {
                break;
            }

            cout << setw(50) << "                                                     Invalid input. Please enter a valid score (0-100) for " << subjectNames[j] << ": ";
            // Pause and wait for Enter key
            cout << setw(50) << "                                                                                                   Press Enter to continue...";
            cin.ignore(numeric_limits<streamsize>::max(), '\n');  // Ignore Enter key
            cin.get();  // Wait for Enter key
            clearScreen();  // Clear screen here
            cout << setw(50) << "                                                     -------------------------------------------------------------" << endl;
            cout << setw(50) << "                                                          CREATE STUDENT RECORD: STARLIGHT HIGH SCHOOL" << endl;
            cout << setw(50) << "                                                     -------------------------------------------------------------" << endl;
            cout << setw(50) << "                                                                                                             " << endl;
            cout << setw(50) << "                                                       STUDENT_ID        : " << studentID[index] << endl;
            cout << setw(50) << "                                                       STUDENT_NAME      : " << studentName[index] << endl;

        }
    }


    // Calculate the average scores
    double sum = 0.0;
    for (int j = 0; j < NUM_SUBJECTS; ++j) {
        sum += scores[index][j];
    }
    double average = sum / static_cast<double>(NUM_SUBJECTS);
    
        // Assign the average score to the scores array
    scores[index][NUM_SUBJECTS] = average;

    // Validate attendance input
    while (true) {
        cout << setw(50) << "                                                STUDENT_ATTENDANCE (%): ";
        cin >> attendance[index];

        if (!cin.fail() && attendance[index] >= 0 && attendance[index] <= 100) {
            break;
        }

        cout << setw(50) << "                                                         Invalid input. Please enter a valid attendance percentage (0-100): ";
        // Pause and wait for Enter key
        cout << setw(50) << "                                                                                                   Press Enter to continue...";
        cin.ignore(numeric_limits<streamsize>::max(), '\n');  // Ignore Enter key
        cin.get();  // Wait for Enter key
            clearScreen();  // Clear screen here
            cout << setw(50) << "                                                     -------------------------------------------------------------" << endl;
            cout << setw(50) << "                                                          CREATE STUDENT RECORD: STARLIGHT HIGH SCHOOL" << endl;
            cout << setw(50) << "                                                     -------------------------------------------------------------" << endl;
            cout << setw(50) << "                                                                                                             " << endl;
            cout << setw(50) << "                                                       STUDENT_ID        : " << studentID[index] << endl;
            cout << setw(50) << "                                                       STUDENT_NAME      : " << studentName[index] << endl;
            cout << setw(50) << "                                                       STUDENT_SCORE     : " << scores[index][6] << endl;

    }

    cin.clear(); // clear error flag
    cin.ignore(numeric_limits<streamsize>::max(), '\n'); // ignore last input

    if (attendance[index] < 40) {
        cout << setw(50) << "                                                                        YOU FAIL TO FULFILL YOUR ATTENDANCE" << endl;
    }
}

// Function to display student records
void displayStudentRecords() {
    cout << setw(50) << "                                                     -------------------------------------------------------------" << endl;
    cout << setw(50) << "                                                              HIGHSCHOOL NAME: STARLIGHT HIGH SCHOOL" << endl;
    cout << setw(50) << "                                                     -------------------------------------------------------------" << endl;

    for (int i = 0; i < MAX_STUDENTS; ++i) {
        if (studentID[i] != 0) { // Check if the student record exists
            cout << setw(50) << "                                                       STUDENT_ID        : " << studentID[i] << endl;
            cout << setw(50) << "                                                       STUDENT_NAME      : " << studentName[i] << endl;
            cout << setw(50) << "                                                       STUDENT_SCORE     : " << scores[i][6] << endl;
            cout << setw(50) << "                                                       STUDENT_ATTENDANCE: " << attendance[i] << "%" << endl;

            if (scores[i][3] < 40) {
                cout << setw(50) << "                                                       STUDENT_PASS/FAIL : FAIL" << endl;
            } else if (scores[i][3] <= 89) {
                cout << setw(50) << "                                                       STUDENT_PASS/FAIL : PASS" << endl;
            } else {
                cout << setw(50) << "                                                       STUDENT_PASS/FAIL : CONGRATS, YOU'RE A TOP STUDENT" << endl;
            }

            cout << setw(50) << "                                                     -------------------------------------------------------------" << endl;

            // Pause and wait for Enter key
            cout << "                                                                 Press Enter to view the next student...";
            cin.ignore(numeric_limits<streamsize>::max(), '\n');  
            cin.get();  
        }
    }
}

// Function to search for a student record
void searchRecord() {
    int searchID;

    cout << setw(50) << "                                                                                                             " << endl;
    cout << setw(50) << "                                                            Enter STUDENT_ID: ";

    // Validate searchID input
    while (true) {
        cin >> searchID;
        if (!cin.fail()) {
            break;
        }
        cout << setw(50) << "                                                          Invalid input. Please enter a valid STUDENT_ID: ";
        // Pause and wait for Enter key
        cout << setw(50) << "                                                                                                    Press Enter to continue...";
        cout << setw(50) << "                                                                                                             " << endl;
        cin.ignore(numeric_limits<streamsize>::max(), '\n');  // Ignore Enter key
        cin.get();  // Wait for Enter key
        clearScreen();  // Clear screen here
        cout << setw(50) << "                                                     -------------------------------------------------------------" << endl;
        cout << setw(50) << "                                                          CREATE STUDENT RECORD: STARLIGHT HIGH SCHOOL" << endl;
        cout << setw(50) << "                                                     -------------------------------------------------------------" << endl;
        cout << setw(50) << "                                                                                                             " << endl;
    }

    clearScreen();  // Assuming you have a function for clearing the screen

    bool found = false;

    for (int i = 0; i < MAX_STUDENTS; ++i) {
        if (studentID[i] == searchID && studentID[i] != 0) {
            found = true;
            cout << setw(50) << "                                                  -------------------------------------------------------------" << endl;
            cout << setw(50) << "                                                                       STUDENT RECORD" << endl;
            cout << setw(50) << "                                                  -------------------------------------------------------------" << endl;
            cout << setw(50) << "                                                               HIGHSCHOOL NAME: STARLIGHT HIGH SCHOOL" << endl;
            cout << setw(50) << "                                                                                                             " << endl;
            cout << setw(50) << "                                                             STUDENT_ID        : " << studentID[i] << endl;
            cout << setw(50) << "                                                             STUDENT_NAME      : " << studentName[i] << endl;
            cout << setw(50) << "                                                             SUBJECT_GRADES    : " << endl;

            for (int j = 0; j < NUM_SUBJECTS; ++j) {
            cout << setw(76) <<                     subjectNames[j] << "   : " << scores[i][j] << endl;
            }
            
            cout << endl;
            cout << endl;
            cout << setw(50) << "                                                             AVERAGE_SCORE     : " << scores[i][3] << endl;
            cout << setw(50) << "                                                             STUDENT_ATTENDANCE: " << attendance[i] << "%" << endl;
            cout << setw(50) << "                                                 -------------------------------------------------------------" << endl;
            cout << setw(50) << "                                                                                                             " << endl;
            break;
        }
    }

    if (!found) {
        cout << setw(50) << "                                                 THE STUDENT RECORD ISN'T RECORDED YET. PLEASE CREATE A NEW RECORD." << endl;
    }

    // Pause and wait for Enter key
    cout << setw(50) << "                                                                      Press Enter to view the next student...";
    cin.ignore(numeric_limits<streamsize>::max(), '\n');
    cin.get();
}

// Function to delete a student record
void deleteRecord() {
    int deleteID;

    cout << setw(50) << "                                                                                                                                    " << endl;
    cout << setw(50) << "                                                            Enter STUDENT_ID to delete: ";

    // Validate deleteID input
    while (true) {
        cin >> deleteID;
        if (!cin.fail()) {
            break;
        }
        cout << "Invalid input. Please enter a valid STUDENT_ID: ";
        // Pause and wait for Enter key
        cout << setw(50) << "                                                                              Press Enter to continue...";
        cin.ignore(numeric_limits<streamsize>::max(), '\n');  // Ignore Enter key
        cin.get();  // Wait for Enter key
        clearScreen();  // Clear screen here
    }

    bool found = false;

    for (int i = 0; i < MAX_STUDENTS; ++i) {
        if (studentID[i] == deleteID) {
            found = true;
            // Display the student record before deletion
            clearScreen();  // Clear screen here
            cout << setw(50) << "                                                               STUDENT RECORD BEFORE DELETION" << endl;
            cout << setw(50) << "                                                  -------------------------------------------------------------" << endl;
            cout << setw(50) << "                                                            HIGHSCHOOL NAME: STARLIGHT HIGH SCHOOL" << endl;
            cout << setw(50) << "                                                  -------------------------------------------------------------" << endl;
            cout << setw(50) << "                                                               HIGHSCHOOL NAME: STARLIGHT HIGH SCHOOL" << endl;
            cout << setw(50) << "                                                                                                             " << endl;
            cout << setw(50) << "                                                             STUDENT_ID        : " << studentID[i] << endl;
            cout << setw(50) << "                                                             STUDENT_NAME      : " << studentName[i] << endl;
            cout << setw(50) << "                                                             SUBJECT_GRADES    : " << endl;

            for (int j = 0; j < NUM_SUBJECTS; ++j) {
            cout << setw(76) <<                     subjectNames[j] << "   : " << scores[i][j] << endl;
            }
            
            cout << endl;
            cout << endl;
            cout << setw(50) << "                                                             AVERAGE_SCORE     : " << scores[i][3] << endl;
            cout << setw(50) << "                                                             STUDENT_ATTENDANCE: " << attendance[i] << "%" << endl;
            cout << setw(50) << "                                                 -------------------------------------------------------------" << endl;
            cout << setw(50) << "                                                                                                             " << endl;

            // Reset the student record
            studentID[i] = 0;
            studentName[i] = "";
            for (int j = 0; j < NUM_SUBJECTS; ++j) {
                scores[i][j] = 0.0;
            }
            attendance[i] = 0;

            cout << setw(50) << "                                                          THE STUDENT RECORD HAS BEEN DELETED SUCCESSFULLY" << endl;
            break;
        }
    }

    if (!found) {
        cout << setw(50) << "                                                   THE STUDENT RECORD ISN'T IN THE SYSTEM. PLEASE ENTER A VALID STUDENT_ID." << endl;
    }

    // Pause and wait for Enter key
    cout << setw(50) << "                                                                              Press Enter to continue...";
    cin.ignore(numeric_limits<streamsize>::max(), '\n');  // Clear input buffer
    cin.get();  // Wait for Enter key
}

// Function to modify a student record
void modifyRecord() {
    int modifyID;

    // Validate modifyID input
    while (true) {
        cout << setw(50) << "  Enter STUDENT_ID to modify (EXAMPLE ID: 123456789): ";
        cin >> modifyID;
        clearScreen();  // Clear screen here
                                        
        if (!cin.fail() && modifyID > 0) {
            break;
        }

        cout << setw(50) << "  Invalid input. Please enter a valid positive STUDENT_ID: ";
        // Pause and wait for Enter key
        cout << setw(50) << "                                                                  Press Enter to continue...";
        cin.clear(); // clear input buffer to restore cin to a usable state
        cin.ignore(numeric_limits<streamsize>::max(), '\n'); // ignore last input
        cin.get();  // Wait for Enter key
        clearScreen();  // Clear screen here
        cout << setw(50) << "                                                 -------------------------------------------------------------" << endl;
        cout << setw(50) << "                                                          MODIFY STUDENT RECORD: STARLIGHT HIGH SCHOOL" << endl;
        cout << setw(50) << "                                                 -------------------------------------------------------------" << endl;
        cout << setw(50) << "                                                                   " << endl;
    }

    // Validate student name input
    string newName = getValidStudentName();

    bool found = false;

    for (int i = 0; i < MAX_STUDENTS; ++i) {
        if (studentID[i] == modifyID) {
            found = true;

            // Modify the student record
            cout << setw(50) << "                                                 -------------------------------------------------------------" << endl;
            cout << setw(50) << "                                                              HIGHSCHOOL NAME: STARLIGHT HIGH SCHOOL" << endl;
            cout << setw(50) << "                                                 -------------------------------------------------------------" << endl;
            cout << setw(50) << "                                                                                                               " << endl;
            cout << setw(50) << "                                                 Enter New STUDENT_ID (EXAMPLE ID: 123456789): " << studentID[i] << endl;
            cout << setw(50) << "                                                 Enter New STUDENT_NAME: " << newName << endl;
            cout << setw(50) << "                                                 Enter New SUBJECT_GRADE (EXAMPLE SCORE: 85):" << endl;

            for (int j = 0; j < NUM_SUBJECTS; ++j) {
                while (true) {
                    cout << setw(50) << "       " << subjectNames[j] << ": ";
                    cin >> scores[i][j];

                    if (!cin.fail() && scores[i][j] >= 0 && scores[i][j] <= 100) {
                        break;
                    }

                     cout << setw(50) << "                                                     Invalid input. Please enter a valid score (0-100) for " << subjectNames[j] << ": ";
                    // Pause and wait for Enter key
                    cout << setw(50) << "                                                                  Press Enter to continue...";
                    cin.clear(); // clear input buffer to restore cin to a usable state
                    cin.ignore(numeric_limits<streamsize>::max(), '\n'); // ignore last input
                    cin.get();  // Wait for Enter key
                    clearScreen();  // Clear screen here
                    cout << setw(50) << "                                          -------------------------------------------------------------" << endl;
                    cout << setw(50) << "                                                MODIFY STUDENT RECORD: STARLIGHT HIGH SCHOOL" << endl;
                    cout << setw(50) << "                                          -------------------------------------------------------------" << endl;
                    cout << setw(50) << "                                                                                                       " << endl;
                    cout << setw(50) << "                                          Enter New STUDENT_ID (EXAMPLE ID: 123456789): " << studentID[i] << endl;
                    cout << setw(50) << "                                          Enter New STUDENT_NAME: " << newName << endl;
                }
            }

            // Calculate the average scores
            double sum = 0.0;
            for (int j = 0; j < NUM_SUBJECTS; ++j) {
                sum += scores[i][j];
            }
            double average = sum / static_cast<double>(NUM_SUBJECTS);

            // Assign the average score to the scores array
            scores[i][NUM_SUBJECTS] = average;

            // Validate attendance input
            while (true) {
                cout << setw(50) << "                                            Enter New STUDENT_ATTENDANCE (%): ";
                cin >> attendance[i];

                if (!cin.fail() && attendance[i] >= 0 && attendance[i] <= 100) {
                    break;
                }

                cout << setw(50) << "                                             Invalid input. Please enter a valid attendance percentage (0-100): ";
                // Pause and wait for Enter key
                cout << setw(50) << "                                                                Press Enter to continue...";
                cin.clear(); // clear input buffer to restore cin to a usable state
                cin.ignore(numeric_limits<streamsize>::max(), '\n'); // ignore last input
                cin.get();  // Wait for Enter key
                clearScreen();  // Clear screen here
                cout << setw(50) << "                                                 -------------------------------------------------------------" << endl;
                cout << setw(50) << "                                                           MODIFY STUDENT RECORD: STARLIGHT HIGH SCHOOL" << endl;
                cout << setw(50) << "                                                 -------------------------------------------------------------" << endl; 
                cout << setw(50) << "                                                                                                              " << endl;
                cout << setw(50) << "                                                            Enter New STUDENT_ID: " << studentID[i] << endl;
                cout << setw(50) << "                                                            Enter New STUDENT_NAME: " << newName << endl;
                cout << setw(50) << "                                                            Enter New SUBJECT_GRADE:" << endl;
            }

            // Display the appropriate message based on attendance
            if (attendance[i] < 40) {
                cout << setw(50) << "                                                               YOU FAIL TO FULFILL YOUR ATTENDANCE" << endl;
            }
            cout << setw(50) << "                                                                        MODIFICATION SUCCESSFUL!" << endl;
            cout << setw(50) << "                                                      -------------------------------------------------------------" << endl;
        }
    }

    if (!found) {
        cout << setw(50) << "                                                       THE STUDENT RECORD ISN'T IN THE SYSTEM. PLEASE CREATE A NEW RECORD." << endl;
    }

    // Pause and wait for Enter key
    cout << setw(50) << "                                                                           Press Enter to view the next student...";
    cin.ignore(numeric_limits<streamsize>::max(), '\n');
    cin.get();
}

// Function to display top students
void displayTopStudents() {
    int count = 0;
    clearScreen();  // Clear screen here
    cout << setw(50) << "                                                -------------------------------------------------------------" << endl;
    cout << setw(50) << "                                                            HIGHSCHOOL NAME: STARLIGHT HIGH SCHOOL" << endl;
    cout << setw(50) << "                                                -------------------------------------------------------------" << endl;
    cout << setw(50) << "                                                         LIST OF TOP STUDENTS (GRED RANGE 90-100):" << endl;
    cout << setw(50) << "                                                                                                             " << endl;

    for (int i = 0; i < MAX_STUDENTS && count < 10; ++i) {
        if (studentID[i] != 0 && scores[i][3] >= 90) {
            cout << setw(45) << count + 1 << ". " << studentName[i] << "\t(" << studentID[i] << ")\t" << scores[i][3] << endl;
            count++;
        }
    }

    if (count == 0) {
        cout << setw(50) << "                                                    NO TOP STUDENTS FOUND." << endl;
    }

    // Pause and wait for Enter key
    cout << setw(50) << "                                                                                                             " << endl;
    cout << "                                                                  Press Enter to continue...";
    cin.ignore(numeric_limits<streamsize>::max(), '\n');  
    cin.get();  
}

// Main function
int main() {
    int userChoice;

    do {
        clearScreen();  // Clear screen here
        cout << setw(50) << "                          ============================================================================================================" << endl;
        cout << setw(50) << "                                                                STUDENT RECORD MANAGEMENT SYSTEM" << endl;
        cout << setw(50) << "                          ============================================================================================================" << endl;
        cout << setw(50) << "                                                  \"WELCOME TO STARLIGHT HIGHSCHOOL WE WILL ALWAYS WELCOME YOU HERE\"" << endl;
        cout << setw(50) << "                                                                       1. STUDENT" << endl;
        cout << setw(50) << "                                                                       2. TEACHER" << endl;
        cout << setw(50) << "                                                                 ENTER YOUR CHOICE (1 OR 2): ";
        cin >> userChoice;

        switch (userChoice) {
            case 1: // Student
                int studentOption;
                do {
                    clearScreen();  // Clear screen here
                    cout << setw(50) << "                                                -------------------------------------------------------------" << endl;
                    cout << setw(50) << "                                                                     STUDENT MENU" << endl;
                    cout << setw(50) << "                                                -------------------------------------------------------------" << endl;
                    cout << setw(50) << "                                                                                                             " << endl;
                    cout << setw(50) << "                                                                  [ SELECT AN OPTION]" << endl;
                    cout << setw(50) << "                                                                   1. Display Record." << endl;
                    cout << setw(50) << "                                                                   2. Search Record." << endl;
                    cout << setw(50) << "                                                                   3. Top Student's Record." << endl;
                    cout << setw(50) << "                                                                   4. Exit." << endl;
                    cout << setw(50) << "                                                                                                              " << endl;
                    cout << setw(50) << "                                                                   ENTER OPTION: ";
                    cin >> studentOption;


                    switch (studentOption) {
                        case 1:
                            displayStudentRecords();
                            break;

                        case 2:
                            searchRecord();
                            break;

                        case 3:
                            displayTopStudents();
                            break;

                        case 4:
                            cout << setw(50) << "                                                     -------------------------------------------------------------" << endl;
                            cout << setw(50) << "                                                           Exiting student menu." << endl;
                            break;

                        default:
                            cout << setw(50) << "                                                  Invalid choice. Please enter a valid option." << endl;
                            break;
                    }

                } while (studentOption != 4);
                break;

            case 2: // Teacher
                if (validatePassword()) {
                    int teacherOption;
                    do {
                        clearScreen();  // Clear screen here
                        cout << setw(50) << "                                                -------------------------------------------------------------" << endl;
                        cout << setw(50) << "                                                                         TEACHER MENU" << endl;
                        cout << setw(50) << "                                                -------------------------------------------------------------" << endl;
                        cout << setw(50) << "                                                                                                             " << endl;
                        cout << setw(50) << "                                                                  [ SELECT AN OPTION]" << endl;
                        cout << setw(50) << "                                                                   1. Create Record." << endl;
                        cout << setw(50) << "                                                                   2. Display Record." << endl;
                        cout << setw(50) << "                                                                   3. Search Record." << endl;
                        cout << setw(50) << "                                                                   4. Delete Record." << endl;          
                        cout << setw(50) << "                                                                   5. Modify Record." << endl;
                        cout << setw(50) << "                                                                   6. Top Student's Record." << endl;
                        cout << setw(50) << "                                                                   7. Exit. " << endl;
                        cout << setw(50) << "                                                                                                             " << endl;
                        cout << setw(50) << "                                                                   ENTER OPTION: ";
                        cin >> teacherOption;

                        switch (teacherOption) {
                            case 1:
                                // Create Record
                                int index;
                                for (index = 0; index < MAX_STUDENTS; ++index) {
                                    if (studentID[index] == 0) {
                                        break;
                                    }
                                }
                                if (index == MAX_STUDENTS) {
                                    cout << setw(50) << "                                                Student records are full. Cannot create more records." << endl;
                                    // Pause and wait for Enter key
                                    cout << "                                                                              Press Enter to continue...";
                                    cin.ignore(numeric_limits<streamsize>::max(), '\n');  // Clear input buffer
                                    cin.get();  // Wait for Enter key
                                } else {
                                    inputStudentData(index);
                                } 
                                break;
                            case 2:
                                clearScreen();  // Clear screen here
                                displayStudentRecords();
                                break;
                            case 3:
                                searchRecord();
                                break;
                            case 4:
                                deleteRecord();
                                break;
                            case 5:
                                modifyRecord();
                                break;
                            case 6:
                                displayTopStudents();
                                break;
                            case 7:
                                cout << setw(50) << "                                                             Exiting teacher menu." << endl;
                                break;
                            default:
                                cout << setw(50) << "                                                                 Invalid choice. Please enter a valid option." << endl;
                                break;
                        }
                    } while (teacherOption != 7);
                } else {
                	cout << setw(50) << "                                                                                                                                    " << endl;
                    cout << setw(50) << "                                                          Invalid password. Access denied to the teacher menu." << endl;
                    // Pause and wait for Enter key
                    cout << setw(50) << "                                                                                                                                    " << endl;
                    cout << setw(50) << "                                                                      Press Enter to continue...";
                    cin.ignore(numeric_limits<streamsize>::max(), '\n');  // Clear input buffer
                    cin.get();  // Wait for Enter key
                }
                break;

            default:
            	cout << setw(50) << "                                                                                                                                    " << endl;
                cout << setw(50) << "                                                                  Invalid choice. Please enter a valid option." << endl;
                // Pause and wait for Enter key
                cout << setw(50) << "                                                                              Press Enter to continue...";
                cin.ignore(numeric_limits<streamsize>::max(), '\n');  // Clear input buffer
                cin.get();  // Wait for Enter key
                break;
        }
    } while (userChoice != 3);

    return 0;
}
