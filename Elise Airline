WELCOME PAGE FRAME
/**
 * Program Description: Welcoming page 
 * Programmer: Haani 
 * Date: 19/04/2024
 */

import javax.swing.*;
import java.awt.*;
import java.awt.image.BufferedImage;

public class MainFrame extends JFrame {
    private JFrame flightSearchFrame;

    public MainFrame() {
        setTitle("Reservation/Booking System");
        setSize(1080, 499);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);

        // Create a JPanel to hold the welcome message and logo
        JPanel mainPanel = new JPanel();
        mainPanel.setLayout(new BorderLayout());

        // Logo Picture
        ImageIcon logoIcon = new ImageIcon("C:/Users/User/Desktop/UPTM/UPTM COURSE/NOTES SEM 2/OBJECT ORIENTED PROGRAMMING/JAVA BLUE J/EliseAirline/image/ticket.JPG");
        ImageIcon scaledLogoIcon = scaleImageIcon(logoIcon, 1080, 399); // Scale the logo to fit a 400x400 area
        JLabel logoLabel = new JLabel(scaledLogoIcon);
        logoLabel.setHorizontalAlignment(SwingConstants.CENTER);
        mainPanel.add(logoLabel, BorderLayout.CENTER);

        // Button - Search Flights
        JButton searchFlightsButton = new JButton("Search Flights");
        searchFlightsButton.setFont(new Font("Arial", Font.PLAIN, 16));
        searchFlightsButton.setBackground(new Color(30, 144, 255));
        searchFlightsButton.setForeground(Color.WHITE);
        searchFlightsButton.setFocusPainted(false);
        searchFlightsButton.addActionListener(e -> {
            // Hide the main frame
            setVisible(false);

            // Show the flight search frame
            if (flightSearchFrame == null) {
                flightSearchFrame = new SearchCountryFrame();
                flightSearchFrame.setVisible(true);
            } else {
                flightSearchFrame.setVisible(true);
            }
        });
        mainPanel.add(searchFlightsButton, BorderLayout.SOUTH);

        // Adding main panel to the frame
        add(mainPanel);

        // Center the frame on the screen
        setLocationRelativeTo(null);
    }

    private ImageIcon scaleImageIcon(ImageIcon icon, int width, int height) {
        Image img = icon.getImage();
        Image scaledImg = img.getScaledInstance(width, height, Image.SCALE_SMOOTH);
        return new ImageIcon(scaledImg);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            MainFrame frame = new MainFrame();
            frame.setVisible(true);
        });
    }
}

COUNTRY SEARCH FRAME
/**
 * Program Description: COUNTRY SEARCH FRAME
 * Programmer: Haani 
 * Date: 19/04/2024
 */

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class SearchCountryFrame extends JFrame {

    public SearchCountryFrame() {
        setTitle("Search for Country");
        setSize(800, 600);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        initComponents();
        setLocationRelativeTo(null);
    }

    private void initComponents() {
        JPanel mainPanel = new JPanel(new GridLayout(0, 1, 0, 9)); // Vertical layout with 5px vertical spacing

        // Header Title
        JLabel headerLabel = new JLabel("CHOOSE YOUR DESTINATION", JLabel.CENTER);
        headerLabel.setFont(new Font("Arial", Font.BOLD, 16));
        mainPanel.add(headerLabel);

        // Create image icons for each country
        ImageIcon melbourneIcon = getBannerImage("Melbourne, Australia");
        ImageIcon kualaLumpurIcon = getBannerImage("Kuala Lumpur, Malaysia");
        ImageIcon amsterdamIcon = getBannerImage("Amsterdam, Netherlands");
        ImageIcon lasVegasIcon = getBannerImage("Las Vegas, USA");
        ImageIcon londonIcon = getBannerImage("London, England");

        // Resize the icons to fit the frame
        int iconWidth = getWidth(); // Use the width of the frame
        int iconHeight = getHeight() / 9; // Divide the height of the frame by 5 for each country
        Image melbourneImage = melbourneIcon.getImage().getScaledInstance(iconWidth, iconHeight, Image.SCALE_SMOOTH);
        Image kualaLumpurImage = kualaLumpurIcon.getImage().getScaledInstance(iconWidth, iconHeight, Image.SCALE_SMOOTH);
        Image amsterdamImage = amsterdamIcon.getImage().getScaledInstance(iconWidth, iconHeight, Image.SCALE_SMOOTH);
        Image lasVegasImage = lasVegasIcon.getImage().getScaledInstance(iconWidth, iconHeight, Image.SCALE_SMOOTH);
        Image londonImage = londonIcon.getImage().getScaledInstance(iconWidth, iconHeight, Image.SCALE_SMOOTH);

        ImageIcon melbourneResizedIcon = new ImageIcon(melbourneImage);
        ImageIcon kualaLumpurResizedIcon = new ImageIcon(kualaLumpurImage);
        ImageIcon amsterdamResizedIcon = new ImageIcon(amsterdamImage);
        ImageIcon lasVegasResizedIcon = new ImageIcon(lasVegasImage);
        ImageIcon londonResizedIcon = new ImageIcon(londonImage);

        // Create custom panels for each country button
        JPanel melbournePanel = createCountryPanel(melbourneResizedIcon, "Melbourne, Australia");
        JPanel kualaLumpurPanel = createCountryPanel(kualaLumpurResizedIcon, "Kuala Lumpur, Malaysia");
        JPanel amsterdamPanel = createCountryPanel(amsterdamResizedIcon, "Amsterdam, Netherlands");
        JPanel lasVegasPanel = createCountryPanel(lasVegasResizedIcon, "Las Vegas, USA");
        JPanel londonPanel = createCountryPanel(londonResizedIcon, "London, England");

        // Add country panels to the main panel
        mainPanel.add(melbournePanel);
        mainPanel.add(kualaLumpurPanel);
        mainPanel.add(amsterdamPanel);
        mainPanel.add(lasVegasPanel);
        mainPanel.add(londonPanel);

        add(mainPanel);
    }

    private ImageIcon getBannerImage(String country) {
        // Map each country to its banner image path
        String imagePath;
        switch (country) {
            case "Melbourne, Australia":
                imagePath = "C:/Users/User/Desktop/UPTM/UPTM COURSE/NOTES SEM 2/OBJECT ORIENTED PROGRAMMING/JAVA BLUE J/EliseAirline/image/SEARCH FLIGHTS FRAME/AUSTRALIA.jpg";
                break;
            case "Kuala Lumpur, Malaysia":
                imagePath = "C:/Users/User/Desktop/UPTM/UPTM COURSE/NOTES SEM 2/OBJECT ORIENTED PROGRAMMING/JAVA BLUE J/EliseAirline/image/SEARCH FLIGHTS FRAME/KUALA LUMPUR.jpg";
                break;
            case "Amsterdam, Netherlands":
                imagePath = "C:/Users/User/Desktop/UPTM/UPTM COURSE/NOTES SEM 2/OBJECT ORIENTED PROGRAMMING/JAVA BLUE J/EliseAirline/image/SEARCH FLIGHTS FRAME/AMSTERDAM.jpg";
                break;
            case "Las Vegas, USA":
                imagePath = "C:/Users/User/Desktop/UPTM/UPTM COURSE/NOTES SEM 2/OBJECT ORIENTED PROGRAMMING/JAVA BLUE J/EliseAirline/image/SEARCH FLIGHTS FRAME/AMERIKA.jpg";
                break;
            case "London, England":
                imagePath = "C:/Users/User/Desktop/UPTM/UPTM COURSE/NOTES SEM 2/OBJECT ORIENTED PROGRAMMING/JAVA BLUE J/EliseAirline/image/SEARCH FLIGHTS FRAME/LONDON.jpg";
                break;
            default:
                // Return a default banner image path if the country is not recognized
                imagePath = "path/to/default/banner.jpg";
        }

        // Load the image
        ImageIcon originalIcon = new ImageIcon(imagePath);

        // Scale the image to fit within the frame size (800x600) while preserving aspect ratio
        int maxWidth = 800;
        int maxHeight = 600;
        int originalWidth = originalIcon.getIconWidth();
        int originalHeight = originalIcon.getIconHeight();
        int scaledWidth, scaledHeight;
        double widthRatio = (double) maxWidth / originalWidth;
        double heightRatio = (double) maxHeight / originalHeight;

        // Use the smaller ratio to ensure the image fits within the frame
        double scaleFactor = Math.min(widthRatio, heightRatio);
        scaledWidth = (int) (originalWidth * scaleFactor);
        scaledHeight = (int) (originalHeight * scaleFactor);

        // Scale the image
        Image scaledImage = originalIcon.getImage().getScaledInstance(scaledWidth, scaledHeight, Image.SCALE_SMOOTH);

        // Return the scaled ImageIcon
        return new ImageIcon(scaledImage);
    }

    private JPanel createCountryPanel(ImageIcon icon, String countryName) {
        JPanel panel = new JPanel(new BorderLayout());
        JButton button = new JButton(icon);
        button.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    dispose();
                    new SearchFlightsFrame(countryName).setVisible(true);
                }
            });
        panel.add(button, BorderLayout.CENTER);
        JLabel label = new JLabel(countryName, JLabel.CENTER);
        panel.add(label, BorderLayout.SOUTH);
        return panel;
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
                    SearchCountryFrame frame = new SearchCountryFrame();
                    frame.setVisible(true);
            });
    }
}

SEARCH FLIGHTS FRAME
/**
 * Program Description: SEARCH FLIGHTS FRAME
 * Programmer: Haani 
 * Date: 19/04/2024
 */

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;

public class SearchFlightsFrame extends JFrame {
    private String selectedCountry;
    private JComboBox<String> comboBoxMonth;
    private JComboBox<String> comboBoxYear;
    private JComboBox<String> comboBoxDay;
    private JComboBox<String> comboBoxTime;
    private JComboBox<Integer> adultComboBox;
    private JComboBox<Integer> childComboBox;
    private JComboBox<Integer> infantComboBox;
    private JLabel bannerLabel; // Label to display the banner image

    public SearchFlightsFrame(String selectedCountry) {
        this.selectedCountry = selectedCountry;
        setTitle("Search for Flights");
        setSize(800, 600);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        initComponents();
        setLocationRelativeTo(null);
    }

    private void initComponents() {
        JPanel mainPanel = new JPanel();
        mainPanel.setLayout(new BoxLayout(mainPanel, BoxLayout.Y_AXIS));

        // Set banner image
        ImageIcon bannerImage = getBannerImage(selectedCountry);
        if (bannerImage != null) {
            bannerLabel = new JLabel(bannerImage);
            bannerLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
            mainPanel.add(bannerLabel);
        }

        // Header Title
        JLabel titleLabel = new JLabel("CLARIFICATION AVAILABILITY FLIGHT", JLabel.CENTER);
        titleLabel.setFont(new Font("Arial", Font.BOLD, 16));
        titleLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
        mainPanel.add(Box.createVerticalGlue()); // Add vertical glue to center-align components
        mainPanel.add(titleLabel);

        // Selected Country
        JLabel countryLabel = new JLabel("Selected Country: " + selectedCountry);
        countryLabel.setAlignmentX(Component.CENTER_ALIGNMENT);
        mainPanel.add(countryLabel);

        // Combo Boxes
        JPanel comboBoxPanel = new JPanel();
        comboBoxMonth = new JComboBox<>(new String[]{"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"});
        comboBoxYear = new JComboBox<>(new String[]{"2022", "2023", "2024", "2025", "2026"});
        comboBoxDay = new JComboBox<>(new String[]{"1", "2", "3", "4", "5", "6", "7", "8", "9", "10", "11", "12", "13", "14", "15", "16", "17", "18", "19", "20", "21", "22", "23", "24", "25", "26", "27", "28", "29", "30", "31"});
        comboBoxTime = new JComboBox<>(new String[]{"Morning", "Afternoon", "Evening"});
        comboBoxPanel.add(comboBoxMonth);
        comboBoxPanel.add(comboBoxDay);
        comboBoxPanel.add(comboBoxYear);
        comboBoxPanel.add(comboBoxTime);
        comboBoxPanel.setAlignmentX(Component.CENTER_ALIGNMENT);
        mainPanel.add(comboBoxPanel);

        // Select Class and Passengers Section
        JPanel classPassengersPanel = new JPanel();
        classPassengersPanel.setLayout(new BoxLayout(classPassengersPanel, BoxLayout.Y_AXIS));

        // Select Class Panel
        JPanel classPanel = new JPanel();
        JLabel classLabel = new JLabel("Select Class:");
        JComboBox<String> classComboBox = new JComboBox<>(new String[]{"Economy", "Business", "First"});
        classPanel.add(classLabel);
        classPanel.add(classComboBox);
        classPassengersPanel.add(classPanel);

        // Passengers Panel
        JPanel passengersPanel = new JPanel();
        passengersPanel.setLayout(new FlowLayout());

        JLabel adultLabel = new JLabel("Adults:");
        adultComboBox = new JComboBox<>(new Integer[]{0, 1, 2, 3, 4, 5});

        JLabel childLabel = new JLabel("Children:");
        childComboBox = new JComboBox<>(new Integer[]{0, 1, 2, 3, 4, 5});

        JLabel infantLabel = new JLabel("Infants:");
        infantComboBox = new JComboBox<>(new Integer[]{0, 1, 2, 3, 4, 5});

        passengersPanel.add(adultLabel);
        passengersPanel.add(adultComboBox);
        passengersPanel.add(childLabel);
        passengersPanel.add(childComboBox);
        passengersPanel.add(infantLabel);
        passengersPanel.add(infantComboBox);
        classPassengersPanel.add(passengersPanel);

        mainPanel.add(classPassengersPanel);

        // Search Flights Button
        JButton searchButton = new JButton("Search Flights");
        searchButton.setAlignmentX(Component.CENTER_ALIGNMENT);
        searchButton.setBackground(new Color(30, 144, 255));
        searchButton.setForeground(Color.WHITE);
        searchButton.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    int adults = (int) adultComboBox.getSelectedItem();
                    int children = (int) childComboBox.getSelectedItem();
                    int infants = (int) infantComboBox.getSelectedItem();

                    if (adults == 0 && children == 0 && infants == 0) {
                        JOptionPane.showMessageDialog(SearchFlightsFrame.this,
                            "Please select at least one passenger.",
                            "Error", JOptionPane.ERROR_MESSAGE);
                        return;
                    }

                    if (infants > 0 && adults == 0) {
                        JOptionPane.showMessageDialog(SearchFlightsFrame.this,
                            "You must select at least one adult when booking with infants.",
                            "Error", JOptionPane.ERROR_MESSAGE);
                        return;
                    }

                    String selectedClass = (String) classComboBox.getSelectedItem();

                    // Create a new SeatSelectionFrame passing the total number of passengers
                    SeatSelectionFrame seatSelectionFrame = new SeatSelectionFrame(adults + children + infants, adults, children, infants, selectedClass);
                    seatSelectionFrame.setVisible(true);
                    seatSelectionFrame.addWindowListener(new java.awt.event.WindowAdapter() {
                            @Override
                            public void windowClosed(java.awt.event.WindowEvent windowEvent) {
                                // After seat selection is done, show the receipt
                                double totalPrice = seatSelectionFrame.getTotalPrice();
                                String receipt = generateReceipt(adults, children, infants, selectedClass, totalPrice);
                                JOptionPane.showMessageDialog(SearchFlightsFrame.this, receipt, "Receipt", JOptionPane.INFORMATION_MESSAGE);
                            }
                        });
                }
            });
        mainPanel.add(searchButton);

        mainPanel.add(Box.createVerticalGlue()); // Add vertical glue to center-align components

        add(mainPanel);
    }

    // Generate receipt message based on selected options and total price
    private String generateReceipt(int adults, int children, int infants, String selectedClass, double totalPrice) {
        StringBuilder receipt = new StringBuilder();
        receipt.append("Receipt:\n");
        receipt.append("Number of Adults: ").append(adults).append("\n");
        receipt.append("Number of Children: ").append(children).append("\n");
        receipt.append("Number of Infants: ").append(infants).append("\n");
        receipt.append("Class: ").append(selectedClass).append("\n");
        receipt.append("Total Price: $").append(String.format("%.2f", totalPrice));
        return receipt.toString();
    }

    // Method to get the banner image based on the selected country
    private ImageIcon getBannerImage(String country) {
        String imagePath;
        switch (country) {
            case "Melbourne, Australia":
                imagePath = "C:/Users/User/Desktop/UPTM/UPTM COURSE/NOTES SEM 2/OBJECT ORIENTED PROGRAMMING/JAVA BLUE J/EliseAirline/image/SEARCH FLIGHTS FRAME/AUSTRALIA.jpg";
                break;
            case "Kuala Lumpur, Malaysia":
                imagePath = "C:/Users/User/Desktop/UPTM/UPTM COURSE/NOTES SEM 2/OBJECT ORIENTED PROGRAMMING/JAVA BLUE J/EliseAirline/image/SEARCH FLIGHTS FRAME/KUALA LUMPUR.jpg";
                break;
            case "Amsterdam, Netherlands":
                imagePath = "C:/Users/User/Desktop/UPTM/UPTM COURSE/NOTES SEM 2/OBJECT ORIENTED PROGRAMMING/JAVA BLUE J/EliseAirline/image/SEARCH FLIGHTS FRAME/AMSTERDAM.jpg";
                break;
            case "Las Vegas, USA":
                imagePath = "C:/Users/User/Desktop/UPTM/UPTM COURSE/NOTES SEM 2/OBJECT ORIENTED PROGRAMMING/JAVA BLUE J/EliseAirline/image/SEARCH FLIGHTS FRAME/AMERIKA.jpg";
                break;
            case "London, England":
                imagePath = "C:/Users/User/Desktop/UPTM/UPTM COURSE/NOTES SEM 2/OBJECT ORIENTED PROGRAMMING/JAVA BLUE J/EliseAirline/image/SEARCH FLIGHTS FRAME/LONDON.jpg";
                break;
            default:
                // Return a default banner image path if the country is not recognized
                imagePath = "path/to/default/banner.jpg";
        }

        try {
            // Load the image
            ImageIcon originalIcon = new ImageIcon(imagePath);

            // Scale the image to fit within the frame size (800x600) while preserving aspect ratio
            int maxWidth = 800;
            int maxHeight = 600;
            int originalWidth = originalIcon.getIconWidth();
            int originalHeight = originalIcon.getIconHeight();
            int scaledWidth, scaledHeight;
            double widthRatio = (double) maxWidth / originalWidth;
            double heightRatio = (double) maxHeight / originalHeight;

            // Use the smaller ratio to ensure the image fits within the frame
            double scaleFactor = Math.min(widthRatio, heightRatio);
            scaledWidth = (int) (originalWidth * scaleFactor);
            scaledHeight = (int) (originalHeight * scaleFactor);

            // Scale the image
            Image scaledImage = originalIcon.getImage().getScaledInstance(scaledWidth, scaledHeight, Image.SCALE_SMOOTH);

            return new ImageIcon(scaledImage);
        } catch (Exception e) {
            // Print the error message if image loading fails
            e.printStackTrace();
            return null;
        }
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
            SearchFlightsFrame frame = new SearchFlightsFrame("Selected Country");
            frame.setVisible(true);
        });
    }
}


SEAT SELECTION FRAME
/**
 * Program Description: SEAT SELECTION FRAME
 * Programmer: Haani 
 * Date: 19/04/2024
 */

import javax.swing.*;
import java.awt.*;
import java.awt.event.ActionEvent;
import java.awt.event.ActionListener;
import java.awt.event.MouseAdapter;
import java.awt.event.MouseEvent;
import java.util.Random;

public class SeatSelectionFrame extends JFrame {
    private int totalPassengers;
    private int selectedSeats = 0; // Track the number of selected seats
    private JLabel[] seatLabels;
    private boolean[] seatAvailability;

    // Store selected options
    private int adults;
    private int children;
    private int infants;
    private String selectedClass;

    public SeatSelectionFrame(int totalPassengers, int adults, int children, int infants, String selectedClass) {
        this.totalPassengers = totalPassengers;
        this.adults = adults;
        this.children = children;
        this.infants = infants;
        this.selectedClass = selectedClass;

        setTitle("Seat Selection");
        setSize(800, 600);
        setDefaultCloseOperation(JFrame.DISPOSE_ON_CLOSE);
        initComponents();
        setLocationRelativeTo(null);
    }

    private void initComponents() {
        JPanel mainPanel = new JPanel(new BorderLayout());

        // Header Title
        JLabel titleLabel = new JLabel("PLEASE CHOOSE YOUR SEATS", JLabel.CENTER);
        titleLabel.setFont(new Font("Arial", Font.BOLD, 16));
        mainPanel.add(titleLabel, BorderLayout.NORTH);

        // Seat Map Panel
        JPanel seatMapPanel = new JPanel(new GridLayout(5, 6, 5, 5)); // Example 5 rows and 6 columns
        seatLabels = new JLabel[30]; // Example: 30 seats
        seatAvailability = new boolean[30]; // Example: Assuming all seats are available initially

        char rowIdentifier = 'A'; // Start with row A
        for (int i = 0; i < seatLabels.length; i++) {
            String seatIdentifier = rowIdentifier + String.valueOf(i % 6 + 1); // Generate seat identifier like A1, A2, A3, ...
            seatLabels[i] = new JLabel(seatIdentifier, JLabel.CENTER);
            seatLabels[i].setOpaque(true);
            seatLabels[i].setBackground(Color.GREEN); // Green indicates available seat
            seatLabels[i].setBorder(BorderFactory.createLineBorder(Color.BLACK));
            seatLabels[i].setFont(new Font("Arial", Font.BOLD, 12));

            // Add mouse listener to handle seat clicks
            final int seatIndex = i;
            seatLabels[i].addMouseListener(new MouseAdapter() {
                    @Override
                    public void mouseClicked(MouseEvent e) {
                        toggleSeatAvailability(seatIndex);
                    }
                });

            seatMapPanel.add(seatLabels[i]);

            // Change row identifier after every 6 seats
            if ((i + 1) % 6 == 0) {
                rowIdentifier++;
            }
        }

        mainPanel.add(seatMapPanel, BorderLayout.CENTER);

        // Button Panel
        JPanel buttonPanel = new JPanel(new FlowLayout(FlowLayout.CENTER));

        JButton totalButton = new JButton("Total Price");
        totalButton.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    double totalPrice = getTotalPrice();
                    JOptionPane.showMessageDialog(SeatSelectionFrame.this,
                        "Total Price: $" + String.format("%.2f", totalPrice),
                        "Total Price", JOptionPane.INFORMATION_MESSAGE);
                }
            });
        buttonPanel.add(totalButton);

        JButton confirmButton = new JButton("Confirm");
        confirmButton.addActionListener(new ActionListener() {
                @Override
                public void actionPerformed(ActionEvent e) {
                    // Check if all seats are selected
                    if (selectedSeats < totalPassengers) {
                        JOptionPane.showMessageDialog(SeatSelectionFrame.this,
                            "Please select seats for all passengers.",
                            "Error", JOptionPane.ERROR_MESSAGE);
                        return; // Stop further execution
                    }

                    // Display receipt confirmation dialog
                    int confirmResult = JOptionPane.showConfirmDialog(SeatSelectionFrame.this,
                            "Confirm your seat selection and proceed to personal information?",
                            "Confirmation", JOptionPane.YES_NO_OPTION);

                    if (confirmResult == JOptionPane.YES_OPTION) {
                        // Hide current frame
                        setVisible(false);
                        // Create and display PersonalInformation frame
                        PersonalInformation personalInformation = new PersonalInformation();
                        personalInformation.collectInformation(SeatSelectionFrame.this);
                    }
                }
            });
        buttonPanel.add(confirmButton);

        mainPanel.add(buttonPanel, BorderLayout.SOUTH);

        add(mainPanel);
    }

    // Method to toggle seat availability when clicked
    private void toggleSeatAvailability(int seatIndex) {
        if (seatAvailability[seatIndex]) {
            seatLabels[seatIndex].setBackground(Color.GREEN); // Green indicates available seat
            seatAvailability[seatIndex] = false; // Mark seat as available
            selectedSeats--; // Decrement selected seats count
        } else {
            if (selectedSeats < totalPassengers) {
                seatLabels[seatIndex].setBackground(Color.RED); // Red indicates selected seat
                seatAvailability[seatIndex] = true; // Mark seat as selected
                selectedSeats++; // Increment selected seats count
            } else {
                JOptionPane.showMessageDialog(this, "You have already selected the maximum number of seats.");
            }
        }
    }

    // Utility class for generating receipt
    public static class ReceiptGenerator {
        public static String generateReceipt(int adults, int children, int infants, String selectedClass, double totalPrice) {
            // Calculate total cost for each passenger category
            double totalAdultCost = adults * calculateTicketPrice(selectedClass, "adult");
            double totalChildCost = children * calculateTicketPrice(selectedClass, "child");
            double totalInfantCost = infants * calculateTicketPrice(selectedClass, "infant");

            // Generate the receipt message
            StringBuilder receipt = new StringBuilder();
            receipt.append("Receipt:\n");
            receipt.append("Number of Adults: ").append(adults).append("\n");
            receipt.append("Number of Children: ").append(children).append("\n");
            receipt.append("Number of Infants: ").append(infants).append("\n");
            receipt.append("Class: ").append(selectedClass).append("\n");
            receipt.append("Total Price: $").append(String.format("%.2f", totalPrice)).append("\n");

            // Append total cost for each passenger category to the receipt
            receipt.append("Total Cost for Adults: $").append(String.format("%.2f", totalAdultCost)).append("\n");
            receipt.append("Total Cost for Children: $").append(String.format("%.2f", totalChildCost)).append("\n");
            receipt.append("Total Cost for Infants: $").append(String.format("%.2f", totalInfantCost)).append("\n");

            // Return the receipt as a string
            return receipt.toString();
        }

        // Method to calculate ticket price based on the class and passenger type
        private static double calculateTicketPrice(String selectedClass, String passengerType) {
            // Define ticket prices for different classes and passenger types
            // You can adjust these prices according to your requirements
            double economyPriceAdult = 100.0;
            double economyPriceChild = 50.0;
            double economyPriceInfant = 20.0;

            double businessPriceAdult = 200.0;
            double businessPriceChild = 100.0;
            double businessPriceInfant = 40.0;

            double firstClassPriceAdult = 300.0;
            double firstClassPriceChild = 150.0;
            double firstClassPriceInfant = 60.0;

            // Determine ticket price based on the selected class and passenger type
            switch (selectedClass.toLowerCase()) {
                case "economy":
                    return switch (passengerType.toLowerCase()) {
                        case "adult" -> economyPriceAdult;
                        case "child" -> economyPriceChild;
                        case "infant" -> economyPriceInfant;
                        default -> 0.0;
                    };
                case "business":
                    return switch (passengerType.toLowerCase()) {
                        case "adult" -> businessPriceAdult;
                        case "child" -> businessPriceChild;
                        case "infant" -> businessPriceInfant;
                        default -> 0.0;
                    };
                case "first":
                    return switch (passengerType.toLowerCase()) {
                        case "adult" -> firstClassPriceAdult;
                        case "child" -> firstClassPriceChild;
                        case "infant" -> firstClassPriceInfant;
                        default -> 0.0;
                    };
                default:
                    return 0.0; // Return 0 if the class is not recognized
            }
        }
    }

    public double getTotalPrice() {
        Random random = new Random();
        double price = random.nextDouble() * (9999 - 1000) + 1000;
        return price;
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(() -> {
                    SeatSelectionFrame frame = new SeatSelectionFrame(3, 2, 1, 0, "Economy"); // Example: 3 total passengers, 2 adults, 1 child, 0 infants, Economy class
                    frame.setVisible(true);
            });
    }
}

PERSONAL INFORMATION FRAME
/**
 * Program Description: PERSONAL INFORMATION 
 * Programmer: SIMON 
 * Date: 19/04/2024
 */

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;

public class PersonalInformation {
    private String firstName;
    private String middleName;
    private String lastName;
    private String email;
    private String confirmEmail;
    private String countryName;
    private String phoneNumber;

    public void collectInformation(JFrame frame) {
        JPanel panel = new JPanel(new GridLayout(8, 2));
        panel.setBorder(BorderFactory.createEmptyBorder(10, 10, 10, 10));

        // First Name
        JLabel firstNameLabel = new JLabel("First Name:");
        JTextField firstNameField = new JTextField(20);
        panel.add(firstNameLabel);
        panel.add(firstNameField);

        // Middle Name
        JLabel middleNameLabel = new JLabel("Middle Name:");
        JTextField middleNameField = new JTextField(20);
        panel.add(middleNameLabel);
        panel.add(middleNameField);

        // Last Name
        JLabel lastNameLabel = new JLabel("Last Name:");
        JTextField lastNameField = new JTextField(20);
        panel.add(lastNameLabel);
        panel.add(lastNameField);

        // Email
        JLabel emailLabel = new JLabel("Email:");
        JTextField emailField = new JTextField(20);
        panel.add(emailLabel);
        panel.add(emailField);

        // Confirm Email
        JLabel confirmEmailLabel = new JLabel("Confirm Email:");
        JTextField confirmEmailField = new JTextField(20);
        panel.add(confirmEmailLabel);
        panel.add(confirmEmailField);

        // Country Name
        JLabel countryLabel = new JLabel("Country Name:");
        JTextField countryField = new JTextField(20);
        panel.add(countryLabel);
        panel.add(countryField);

        // Phone Number
        JLabel phoneLabel = new JLabel("Phone Number:");
        JTextField phoneField = new JTextField(20);
        panel.add(phoneLabel);
        panel.add(phoneField);

        // Flights Food Button
        JButton flightsFoodButton = new JButton("Flights Food");
        flightsFoodButton.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    // Hide current frame
                    frame.setVisible(false);
                    // Create and display MenuFrame
                    MenuFrame menuFrame = new MenuFrame();
                    menuFrame.setVisible(true);
                }
            });
        panel.add(flightsFoodButton);

        // Flights Lounge Button
        JButton flightsLoungeButton = new JButton("Flights Lounge");
        flightsLoungeButton.addActionListener(new ActionListener() {
                public void actionPerformed(ActionEvent e) {
                    // Hide current frame
                    frame.setVisible(false);
                    // Create and display AirportLounge frame
                    AirportLounge airportLounge = new AirportLounge();
                    airportLounge.setVisible(true); // Add this line to make the AirportLounge frame visible
                }
            });
        panel.add(flightsLoungeButton);

        int result = JOptionPane.showConfirmDialog(frame, panel, "Personal Information", JOptionPane.OK_CANCEL_OPTION);
        if (result == JOptionPane.OK_OPTION) {
            firstName = firstNameField.getText();
            middleName = middleNameField.getText();
            lastName = lastNameField.getText();
            email = emailField.getText();
            confirmEmail = confirmEmailField.getText();
            countryName = countryField.getText();
            phoneNumber = phoneField.getText();

            // Display receipt confirmation dialog
            int confirmResult = JOptionPane.showConfirmDialog(frame,
                "Confirm your personal information and proceed to payment?",
                "Confirmation", JOptionPane.YES_NO_OPTION);

            if (confirmResult == JOptionPane.YES_OPTION) {
                // Generate receipt
                String receipt = generateReceipt();

                // Display receipt
                JOptionPane.showMessageDialog(frame, receipt, "Receipt", JOptionPane.INFORMATION_MESSAGE);
            }
        }
    }

    // Method to generate receipt message
    private String generateReceipt() {
        // Generate the receipt message
        StringBuilder receipt = new StringBuilder();
        receipt.append("Receipt:\n");
        receipt.append("First Name: ").append(firstName).append("\n");
        receipt.append("Middle Name: ").append(middleName).append("\n");
        receipt.append("Last Name: ").append(lastName).append("\n");
        receipt.append("Email: ").append(email).append("\n");
        receipt.append("Country Name: ").append(countryName).append("\n");
        receipt.append("Phone Number: ").append(phoneNumber).append("\n");
        return receipt.toString();
    }

    public static void main(String[] args) {
        PersonalInformation personalInformation = new PersonalInformation();
        JFrame frame = new JFrame();
        frame.setTitle("ELISE AIRLINES");
        frame.setSize(500, 500);
        frame.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
        frame.setLocationRelativeTo(null);
        frame.setVisible(true);

        personalInformation.collectInformation(frame);
    }
}

MENU FRAME
/**
 * Program Description: MENU 
 * Programmer: IRDINA 
 * Date: 19/04/2024
 */

import javax.swing.*;
import javax.swing.border.*;
import java.awt.*;
import java.awt.event.*;
import java.util.*;

public class MenuFrame extends JFrame implements ActionListener {
    private JLabel menuList1, menuList2, menuList3, menuList4, menuList5;
    private JList<String> ldList, hmList, icList, pmList, bList;
    private JButton skipLounge, skipDetails;
    private JComboBox<Integer> ldCount, hmCount, icCount, pmCount, bCount;

    private Map<String, JList<String>> menuLists;
    private Map<String, JComboBox<Integer>> countComboBoxes;

    public MenuFrame() {
        super("ELISE AIRLINES");
        Container cont = getContentPane();
        cont.setLayout(new BorderLayout());

        // Set up labels
        menuList1 = new JLabel("Local Delights");
        menuList2 = new JLabel("Healthy Meals");
        menuList3 = new JLabel("International Cuisine");
        menuList4 = new JLabel("Premium Meals");
        menuList5 = new JLabel("Beverages");

        // Set options for the menu category
        ldList = new JList<>(new String[]{"Nasi Lemak (MYR10)", "Chicken Rice (MYR9)", "Pad Thai (MYR8)"});
        hmList = new JList<>(new String[]{"Salads (MYR9)", "Grilled Chicken (MYR13)", "Fresh Fruit Platters (MYR15)"});
        icList = new JList<>(new String[]{"Pasta (MYR20)", "Sushi (MYR25)", "Curry (MYR10)"});
        pmList = new JList<>(new String[]{"Steak (MYR45)", "Seafood (MYR40)", "Champagne (MYR55)"});
        bList = new JList<>(new String[]{"Soft Drinks (MYR5)", "Water (MYR3)", "Juice (MYR8)"});

        // Set up buttons
        skipLounge = new JButton("AIRPORT LOUNGE");
        skipDetails = new JButton("OK");

        // Set up JComboBox for tick and count for the number of items
        Integer[] counts = {0, 1, 2, 3, 4, 5};
        ldCount = new JComboBox<>(counts);
        hmCount = new JComboBox<>(counts);
        icCount = new JComboBox<>(counts);
        pmCount = new JComboBox<>(counts);
        bCount = new JComboBox<>(counts);

        // Initialize maps to store components
        menuLists = new HashMap<>();
        countComboBoxes = new HashMap<>();
        menuLists.put("Local Delights", ldList);
        menuLists.put("Healthy Meals", hmList);
        menuLists.put("International Cuisine", icList);
        menuLists.put("Premium Meals", pmList);
        menuLists.put("Beverages", bList);
        countComboBoxes.put("Local Delights", ldCount);
        countComboBoxes.put("Healthy Meals", hmCount);
        countComboBoxes.put("International Cuisine", icCount);
        countComboBoxes.put("Premium Meals", pmCount);
        countComboBoxes.put("Beverages", bCount);

        // Set up JPanel1
        JPanel pnlMenu = new JPanel(new GridLayout(5, 3));
        pnlMenu.setBorder(new TitledBorder(new EtchedBorder(), "Menu (Optional)"));

        // Add everything to pnlMenu
        pnlMenu.add(menuList1);
        pnlMenu.add(new JScrollPane(ldList));
        pnlMenu.add(ldCount);
        pnlMenu.add(menuList2);
        pnlMenu.add(new JScrollPane(hmList));
        pnlMenu.add(hmCount);
        pnlMenu.add(menuList3);
        pnlMenu.add(new JScrollPane(icList));
        pnlMenu.add(icCount);
        pnlMenu.add(menuList4);
        pnlMenu.add(new JScrollPane(pmList));
        pnlMenu.add(pmCount);
        pnlMenu.add(menuList5);
        pnlMenu.add(new JScrollPane(bList));
        pnlMenu.add(bCount);

        // Set up JPanel2
        JPanel pnlSkip = new JPanel(new GridLayout(1, 2));
        pnlSkip.setBorder(new TitledBorder(new EtchedBorder(), "Skip to: "));

        // Add buttons to pnlSkip
        pnlSkip.add(skipLounge);
        pnlSkip.add(skipDetails);

        // Add pnlMenu and pnlSkip to container
        cont.add(pnlMenu, BorderLayout.CENTER);
        cont.add(pnlSkip, BorderLayout.SOUTH);

        // Register actionListener
        skipLounge.addActionListener(this);
        skipDetails.addActionListener(this);

        // Set frame properties
        setSize(800, 600);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }

    public static void main(String[] args) {
        SwingUtilities.invokeLater(new Runnable() {
            public void run() {
                MenuFrame frame = new MenuFrame();
                frame.setVisible(true);
            }
        });
    }

    public void actionPerformed(ActionEvent e) {
        if (e.getSource() == skipLounge) {
            // Hide current frame
            this.setVisible(false);
            // Create and display AirportLounge frame
            AirportLounge airportLounge = new AirportLounge();
            airportLounge.setVisible(true);
        } else if (e.getSource() == skipDetails) {
            // Handle clear button action
            // Clear selections
            for (JList<String> list : menuLists.values()) {
                list.clearSelection();
            }

            // Reset JComboBoxes
            for (JComboBox<Integer> comboBox : countComboBoxes.values()) {
                comboBox.setSelectedIndex(0);
            }

            // Hide current frame
            this.setVisible(false);
            // Create and display Payment frame
            Payment paymentFrame = new Payment();
            paymentFrame.setVisible(true);
        }
    }

    public Map<String, Integer> getSelectedMenuItems() {
        Map<String, Integer> selectedItems = new HashMap<>();
        for (String category : menuLists.keySet()) {
            JList<String> list = menuLists.get(category);
            JComboBox<Integer> comboBox = countComboBoxes.get(category);
            int selectedIndex = list.getSelectedIndex();
            int count = (Integer) comboBox.getSelectedItem();
            if (selectedIndex != -1 && count > 0) {
                String selectedItem = list.getModel().getElementAt(selectedIndex);
                selectedItems.put(selectedItem, count);
            }
        }
        return selectedItems;
    }
}

PAYMENT FRAME
/**
 * Program Description: PAYMENT 
 * Programmer: NABIHAH 
 * Date: 19/04/2024
 */

import javax.swing.*;
import java.awt.*;
import java.awt.event.*;
import java.util.HashMap;

public class Payment extends JFrame implements ActionListener {
    private JComboBox<String> comboBoxCardType, comboBoxMonth, comboBoxYear;
    private JTextField txtCardNumber, txtSecurityCode, txtCardholderName, txtEmail, txtCountryCode, txtPhoneNumber;

    private String cardType;
    private String cardNumber;
    private String expiryDate;
    private String securityCode;
    private String cardholderName;
    private String email;
    private String countryCode;
    private String phoneNumber;

    public Payment() {
        super("Payment");
        Container cont = getContentPane();
        cont.setLayout(new BorderLayout());

        // Combo Boxes
        comboBoxCardType = new JComboBox<>(new String[]{"Visa", "MasterCard"});
        comboBoxMonth = new JComboBox<>(new String[]{"January", "February", "March", "April", "May", "June", "July", "August", "September", "October", "November", "December"});
        comboBoxYear = new JComboBox<>(new String[]{"2022", "2023", "2024", "2025", "2026"});

        // Text Fields
        txtCardNumber = new JTextField(20);
        txtSecurityCode = new JTextField(5);
        txtCardholderName = new JTextField(20);
        txtEmail = new JTextField(20);
        txtCountryCode = new JTextField(5);
        txtPhoneNumber = new JTextField(10);

        // Panel
        JPanel panel = new JPanel();
        panel.setLayout(new GridLayout(10, 2));
        panel.add(new JLabel("Card Type"));
        panel.add(comboBoxCardType);
        panel.add(new JLabel("Card Number"));
        panel.add(txtCardNumber);
        panel.add(new JLabel("Expiry Date"));
        panel.add(comboBoxMonth);
        panel.add(new JLabel("")); // Spacer
        panel.add(comboBoxYear);
        panel.add(new JLabel("Security Code"));
        panel.add(txtSecurityCode);
        panel.add(new JLabel("Contact Information"));
        panel.add(new JLabel("")); // Spacer
        panel.add(new JLabel("Cardholder's Name"));
        panel.add(txtCardholderName);
        panel.add(new JLabel("Email"));
        panel.add(txtEmail);
        panel.add(new JLabel("Country Code"));
        panel.add(txtCountryCode);
        panel.add(new JLabel("Phone Number"));
        panel.add(txtPhoneNumber);

        // Panel for button
        JPanel pnlSkip = new JPanel();
        pnlSkip.setLayout(new FlowLayout(FlowLayout.CENTER));
        JButton skipDetails = new JButton("OK");
        skipDetails.addActionListener(this);
        pnlSkip.add(skipDetails);

        // Add panels to content pane
        getContentPane().add(panel, BorderLayout.CENTER);
        getContentPane().add(pnlSkip, BorderLayout.SOUTH);

        // Set frame properties
        setSize(400, 400);
        setLocationRelativeTo(null);
        setDefaultCloseOperation(EXIT_ON_CLOSE);
        setVisible(true);
    }

    public void actionPerformed(ActionEvent e) {
        if (e.getActionCommand().equals("OK")) {
            // Collect payment data
            cardType = (String) comboBoxCardType.getSelectedItem();
            cardNumber = txtCardNumber.getText();
            expiryDate = comboBoxMonth.getSelectedItem() + " " + comboBoxYear.getSelectedItem();
            securityCode = txtSecurityCode.getText();
            cardholderName = txtCardholderName.getText();
            email = txtEmail.getText();
            countryCode = txtCountryCode.getText();
            phoneNumber = txtPhoneNumber.getText();

            // Display the ticket with all data
            displayTicket();
        }
    }

    private void displayTicket() {
        // Generate the receipt message
        StringBuilder receipt = new StringBuilder();
        receipt.append("Receipt:\n");
        receipt.append("Card Type: ").append(cardType).append("\n");
        receipt.append("Card Number: ").append(cardNumber).append("\n");
        receipt.append("Expiry Date: ").append(expiryDate).append("\n");
        receipt.append("Security Code: ").append(securityCode).append("\n");
        receipt.append("Cardholder's Name: ").append(cardholderName).append("\n");
        receipt.append("Email: ").append(email).append("\n");
        receipt.append("Country Code: ").append(countryCode).append("\n");
        receipt.append("Phone Number: ").append(phoneNumber).append("\n");

        // Display the receipt
        JOptionPane.showMessageDialog(this,
            receipt.toString(),
            "Payment Receipt", JOptionPane.INFORMATION_MESSAGE);
    }
}
